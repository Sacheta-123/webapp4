name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:latest
            docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}

  scan:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Fail the workflow if vulnerabilities are found
        if: ${{ steps.trivy.outputs.vulnerability_count > 0 }}
        run: |
          echo "Vulnerabilities found in image, failing the workflow."
          exit 1

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: scan  # Only run if the scan job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Log in to Kubernetes cluster
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: Deploy Docker image to Kubernetes
        run: |
          kubectl set image deployment/flask-web-app flask-web-app=docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}
          kubectl rollout status deployment/flask-web-app
